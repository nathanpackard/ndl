//see http://www.engineeringproductivitytools.com/stuff/T0001/PT10.HTM#Head521
//for online notes

//=============================================
//Real FFT
//=============================================
 F(k) = 0.5*((Z(k) + Z(N/2 - k)*) - (je^(-j2PIk/N))*(Z(k) - Z(N/2 - k)*) )

//define variables
 Z(k) = (fft_output[k2] + fft_output[k2+1]*j)
 Z(N/2 - k)* = (fft_output[n-k2] - fft_output[1 + n-k2]*j)
 e^(-j2PIk/N) = (cos(-2*PI*k/n) + j*sin(-2*PI*k/n))

//substitute
 F(k) = 0.5*(((fft_output[k2] + fft_output[k2+1]*j) + (fft_output[n-k2] - fft_output[1 + n-k2]*j)) - (j*(cos(-2*PI*k/n) + j*sin(-2*PI*k/n)))*((fft_output[k2] + fft_output[k2+1]*j) - (fft_output[n-k2] - fft_output[1 + n-k2]*j)) )

//simplify and pull out parts
F(k) = 0.5*(fft_output[k2] + fft_output[k2+1]*j + fft_output[n-k2] - fft_output[1 + n-k2]*j - (j*(cos(-2*PI*k/n) + j*sin(-2*PI*k/n)))*((fft_output[k2] + fft_output[k2+1]*j) - (fft_output[n-k2] - fft_output[1 + n-k2]*j)) )
F(k) = real + imag + leftovers
real = 0.5*( fft_output[k2] + fft_output[n-k2])
imag = 0.5*( fft_output[k2+1] - fft_output[1 + n-k2])
leftovers = 0.5*( - (j*(cos(-2*PI*k/n) + j*sin(-2*PI*k/n)))*((fft_output[k2] + fft_output[k2+1]*j) - (fft_output[n-k2] - fft_output[1 + n-k2]*j)) )

//simplify more
leftovers = 0.5*( (sin(-2*PI*k/n) -j*cos(-2*PI*k/n))*(fft_output[k2] - fft_output[n-k2] + j*(fft_output[k2+1] + fft_output[1 + n-k2])) )
                
//cross multiply
leftovers = 0.5*( (A + B)*(C + D) ) = 0.5*( AC + AD + BC + BD )
 A = sin(-2*PI*k/n)
 B = -j*cos(-2*PI*k/n)
 C = (fft_output[k2] - fft_output[n-k2])
 D = (fft_output[k2+1] + fft_output[1 + n-k2])*j
 AC = sin(-2*PI*k/n)*(fft_output[k2] - fft_output[n-k2])
 AD = j*sin(-2*PI*k/n)*(fft_output[k2+1] + fft_output[1 + n-k2])
 BC = -j*cos(-2*PI*k/n)*(fft_output[k2] - fft_output[n-k2])
 BD = cos(-2*PI*k/n)*(fft_output[k2+1] + fft_output[1 + n-k2])
 
 //pull out remaining parts
leftovers = 0
real = 0.5*( fft_output[k2] + fft_output[n-k2] + AC + BD)
imag = 0.5*( fft_output[k2+1] - fft_output[1 + n-k2] + AD + BC)


//=============================================
//Real iFFT
//=============================================
Z(k) = Fe(k) + j*Fo(k)
Fe(k) = 0.5*(F(k) + F(N/2 - k)*)
Fo(k) = 0.5*(F(k) - F(N/2 - k)*)*e^(j*2*PI*k/N)

//identities
e^(j*2*PI*k/N) = (cos(2*PI*k/N) + j*sin(2*PI*k/N)) = (fft_twiddles2[k2] + j*fft_twiddles2[k2+1])
F(k) = fft_input[k2] + j*fft_input[k2+1]
F(N/2 - k)* = (fft_input[n - k2] - j*fft_input[1+n - k2])

//substitution
Z(k) = 0.5*(F(k) + F(N/2 - k)*) + j*0.5*(F(k) - F(N/2 - k)*)*e^(j*2*PI*k/N)

Z(k) = 0.5*(fft_input[k2] + j*fft_input[k2+1] + fft_input[n - k2] - j*fft_input[1+n - k2])
   + j*0.5*(fft_input[k2] + j*fft_input[k2+1] - fft_input[n - k2] + j*fft_input[1+n - k2])*(fft_twiddles2[k2] + j*fft_twiddles2[k2+1])

//simplify
Z(k) = 0.5*(fft_input[k2] + j*fft_input[k2+1] + fft_input[n - k2] - j*fft_input[1+n - k2])
         + (fft_input[k2] + j*fft_input[k2+1] - fft_input[n - k2] + j*fft_input[1+n - k2])*(j*0.5*fft_twiddles2[k2] - 0.5*fft_twiddles2[k2+1])

Z(k) = 0.5*(fft_input[k2] + j*fft_input[k2+1] + fft_input[n - k2] - j*fft_input[1+n - k2])
       + 0.5*fft_twiddles2[k2]*(j*fft_input[k2] - fft_input[k2+1] - j*fft_input[n - k2] - fft_input[1+n - k2])
       - 0.5*fft_twiddles2[k2+1]*(fft_input[k2] + j*fft_input[k2+1] - fft_input[n - k2] + j*fft_input[1+n - k2])

float real = 0.5*( fft_input[k2] + fft_input[n - k2]
                  - ( fft_input[k2+1] + fft_input[1+n - k2] )*fft_twiddles2[k2]
                  + (-fft_input[k2] + fft_input[n - k2])*fft_twiddles2[k2+1]
                  );

float imag = 0.5*( fft_input[k2+1] - fft_input[1+n - k2]
                  + ( fft_input[k2] - fft_input[n - k2] )*fft_twiddles2[k2]
                  - ( fft_input[k2+1] + fft_input[1+n - k2])*fft_twiddles2[k2+1]
                  );
